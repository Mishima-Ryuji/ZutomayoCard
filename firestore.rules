service cloud.firestore {
  match /databases/{database}/documents {
  	function documentPath(paths) {
      return path([['databases', database, 'documents'].join('/'), paths.join('/')].join('/'));
    }
    
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUserAuthenticated(userId) {
      return isAuthenticated() && userId == request.auth.uid;
    }

    function isAdmin() {
      return isAuthenticated() && exists(documentPath(["admin", request.auth.uid]));
    }

    function existingData() {
      return resource.data
    }

    function requestData() {
      return request.resource.data
    }
    
    match /admin/{uid} {
      allow read: if isUserAuthenticated(uid);
    }

    match /cards/{id} {
      allow read;
      allow update: if isAdmin();
    }
    
    match /combos/{id} {
      allow read;
      allow write: if isAdmin();
    }
    
    match /questions/{id} {
      allow read;
      allow write: if isAdmin();
    }
    
    match /decks/{id} {
      allow read: if isUserAuthenticated(existingData().created_by) || existingData().is_public;
      allow create: 
      	if isUserAuthenticated(requestData().created_by) 
      		&& (isAdmin() || !requestData().is_recommended);
      allow update: 
      	if isUserAuthenticated(existingData().created_by)
        	&& isUserAuthenticated(requestData().created_by) 
      		&& (isAdmin() || !requestData().is_recommended);
      allow delete: if isUserAuthenticated(existingData().created_by); 
    }
    
    match /profiles/{uid} {
      allow read;
      allow write: if isUserAuthenticated(uid);
    }
  }
}
